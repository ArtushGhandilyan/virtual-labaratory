<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ru.mipt1c.laboratory.db.dao.ConfigPropertyDAO">
  <resultMap id="BaseResultMap" type="ru.mipt1c.laboratory.db.dto.ConfigPropertyDto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="property_id" jdbcType="INTEGER" property="propertyId" />
    <result column="property_name" jdbcType="VARCHAR" property="propertyName" />
    <result column="property_value" jdbcType="VARCHAR" property="propertyValue" />
    <result column="property_description" jdbcType="VARCHAR" property="propertyDescription" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    property_id, property_name, property_value, property_description
  </sql>
  <select id="selectByExample" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyCondition" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from config_property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="groupByClause != null">
      group by ${groupByClause}
    </if>
    <if test="limitClause != null">
      limit ${limitClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from config_property
    where property_id = #{propertyId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from config_property
    where property_id = #{propertyId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyCondition">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from config_property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyDto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into config_property (property_id, property_name, property_value, 
      property_description)
    values (#{propertyId,jdbcType=INTEGER}, #{propertyName,jdbcType=VARCHAR}, #{propertyValue,jdbcType=VARCHAR}, 
      #{propertyDescription,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyDto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into config_property
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="propertyId != null">
        property_id,
      </if>
      <if test="propertyName != null">
        property_name,
      </if>
      <if test="propertyValue != null">
        property_value,
      </if>
      <if test="propertyDescription != null">
        property_description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="propertyId != null">
        #{propertyId,jdbcType=INTEGER},
      </if>
      <if test="propertyName != null">
        #{propertyName,jdbcType=VARCHAR},
      </if>
      <if test="propertyValue != null">
        #{propertyValue,jdbcType=VARCHAR},
      </if>
      <if test="propertyDescription != null">
        #{propertyDescription,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyCondition" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from config_property
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update config_property
    <set>
      <if test="record.propertyId != null">
        property_id = #{record.propertyId,jdbcType=INTEGER},
      </if>
      <if test="record.propertyName != null">
        property_name = #{record.propertyName,jdbcType=VARCHAR},
      </if>
      <if test="record.propertyValue != null">
        property_value = #{record.propertyValue,jdbcType=VARCHAR},
      </if>
      <if test="record.propertyDescription != null">
        property_description = #{record.propertyDescription,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update config_property
    set property_id = #{record.propertyId,jdbcType=INTEGER},
      property_name = #{record.propertyName,jdbcType=VARCHAR},
      property_value = #{record.propertyValue,jdbcType=VARCHAR},
      property_description = #{record.propertyDescription,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyDto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update config_property
    <set>
      <if test="propertyName != null">
        property_name = #{propertyName,jdbcType=VARCHAR},
      </if>
      <if test="propertyValue != null">
        property_value = #{propertyValue,jdbcType=VARCHAR},
      </if>
      <if test="propertyDescription != null">
        property_description = #{propertyDescription,jdbcType=VARCHAR},
      </if>
    </set>
    where property_id = #{propertyId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="ru.mipt1c.laboratory.db.dto.ConfigPropertyDto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update config_property
    set property_name = #{propertyName,jdbcType=VARCHAR},
      property_value = #{propertyValue,jdbcType=VARCHAR},
      property_description = #{propertyDescription,jdbcType=VARCHAR}
    where property_id = #{propertyId,jdbcType=INTEGER}
  </update>
  <insert id="insertList" parameterType="java.util.List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    INSERT INTO config_property (property_id, property_name, property_value, property_description) VALUES
    <foreach close=")" collection="recordList" item="parm" open="(" separator="),(">
      #{parm.propertyId}, #{parm.propertyName}, #{parm.propertyValue}, #{parm.propertyDescription}
    </foreach>
  </insert>
</mapper>